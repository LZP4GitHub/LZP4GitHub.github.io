<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>背包问题</title>
      <link href="/2020/09/03/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/03/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>背包问题    </p><a id="more"></a> <p><a href="https://github.com/tianyicui/pack" target="_blank" rel="noopener">原文为“背包九问”的读后整理</a></p><h1 id="背包问题描述及基本思路"><a href="#背包问题描述及基本思路" class="headerlink" title="背包问题描述及基本思路"></a>背包问题描述及基本思路</h1><p>背包体积一定，给一些具有重量和体积的石头，问怎么装能让背包里装的石头最重。 </p><ul><li><p>背包问题可以由动态规划来解决，是一类动态规划问题。 </p></li><li><p>背包问题可以随时想着怎么减少冗余，对于体积大重量小的及时清除出去，可以加快计算。但是又不能完全以密度来分别物体好坏。有的小体积的物体可以在背包里插缝放，可能方案更好。    </p></li><li><p>背包问题分为01背包，完全背包和多重背包。01背包中石头各不相同，每种石头只有一个。 完全背包是给几类石头，每类石头都有无数个。多重背包就是给几类石头，但是各类石头都只有有限个。 </p></li></ul><h1 id="01背包解决方法"><a href="#01背包解决方法" class="headerlink" title="01背包解决方法"></a>01背包解决方法</h1><ul><li>01背包中 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0</span>][<span class="number">0</span>,<span class="number">1</span>,...,V] = [<span class="number">0</span>,<span class="number">0</span>,...,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> range(V,vi<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">F[i][v] = max(F[i<span class="number">-1</span>][v],F[i<span class="number">-1</span>][v-vi]+wi)</span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line">可以简化为：  </span><br><span class="line"></span><br><span class="line">``` python   </span><br><span class="line">F[<span class="number">0</span>,<span class="number">1</span>,...,V] = [<span class="number">0</span>,<span class="number">0</span>,...,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> range(V,vi<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">F[v] = max(F[v],F[v-vi]+wi)</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">如果是恰好装满背包，初始化时`F[<span class="number">0</span>]`为<span class="number">0</span>，`F[<span class="number">1.</span>..V]=-∞`。   </span><br><span class="line"><span class="comment"># 完全背包解决方法 </span></span><br><span class="line"></span><br><span class="line">- 完全背包就是这n种石头，每一种都有无穷多个，他的状态转换方程就变了。</span><br><span class="line"></span><br><span class="line">`F[i,v] = max&#123;F[i<span class="number">-1</span>,v-k*vi] + k*wi | <span class="keyword">for</span> all <span class="number">0</span>&lt;=k*vi&lt;=v&#125;`这里也是可以改写的,这一项就是本身和`F[i,v-vi]+wi`两项的最大值 `F[i,v] = max&#123;F[i,v]，F[i][v-vi] + wi&#125;`，用这个式子就要从左到右遍历一遍。 </span><br><span class="line">``` python</span><br><span class="line">F[<span class="number">0</span>,...V]=[<span class="number">0</span>,...,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> range(vi,V+<span class="number">1</span>):</span><br><span class="line">F[v] = max(F[v],F[v-vi]+wi)</span><br></pre></td></tr></table></figure><p>01背包从右向左循环是为了保持迭代值还是上一种石头的情况没有改变，完全背包从左到右循环是为了保证每次的迭代值已经被前边的值更新过了。    </p><h1 id="多重背包解决方法"><a href="#多重背包解决方法" class="headerlink" title="多重背包解决方法"></a>多重背包解决方法</h1><p>多重背包问题是当每类石头有有限个时，当只把这类石头都放进去就能装满背包，就当成完全背包问题。如果不行，就转化为M个01背包问题。或者分成 1，2，4，8，16，…,2^(n-1),M-2^n+1。这n+1块石头。这里的n是满足2^n&lt;=M的最大的n。这里所有小于M的数字都可以找到相应石头的组合。<br>这里可以看成：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">F = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,..<span class="number">.0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N):</span><br><span class="line"><span class="keyword">if</span>(Mi*vi&gt;=V):</span><br><span class="line"><span class="comment">#完全背包 从左到右</span></span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line"><span class="comment">#多个01背包，可以在这里解耦为 1，2，4，..., 2^(n-1),Mi- 2^n +1</span></span><br></pre></td></tr></table></figure><p>混合三种背包也与上边方法一样的。   </p>]]></content>
      
      
      <categories>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和面向对象</title>
      <link href="/2020/05/18/Python_Feature_3/"/>
      <url>/2020/05/18/Python_Feature_3/</url>
      
        <content type="html"><![CDATA[<hr><p>Python中类与对象知识点   </p><a id="more"></a><h2 id="对象比较：is-与"><a href="#对象比较：is-与" class="headerlink" title="对象比较：is 与 =="></a>对象比较：is 与 ==</h2><p><code>id()</code>（也就是内存地址）相同就可以is  </p><ul><li>当两个变量指向同一个对象即id相同时，is 表达式的结果为True   </li><li>当各变量指向的对象含有相同内容时，==表达式的结果为True。</li></ul><h2 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h2><p>可以在自己的类中添加__str__函数，当尝试对象转换为字符串时会调用这个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color, mileage)</span>:</span></span><br><span class="line">self.color = color</span><br><span class="line">self.mileage = mileage</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">f'a <span class="subst">&#123;self.color&#125;</span> car'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_car = Car(<span class="string">'red'</span>, <span class="number">37281</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(my_car)</span><br><span class="line"><span class="string">'a red car'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_car</span><br><span class="line">&lt;__console__.Car object at <span class="number">0x109ca24e0</span>&gt;</span><br></pre></td></tr></table></figure><p>在Python 解释器会话中查看对象得到的是对象的_<em>repr__结果。所以得到`&lt;<em>_console</em></em>.Car object at 0x109ca24e0&gt;`,可以修改得到其他输出。<br>像列表和字典这样的容器总是使用__repr__的结果来表示所包含的对象，哪怕对容器本身调用str()也是如此.<br>可以指定str()或者repr()来调用函数。<br>str（）更加清晰 repr更方便程序员调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today = datetime.date.today()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(today)</span><br><span class="line"><span class="string">'2017-02-02'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(today)</span><br><span class="line"><span class="string">'datetime.date(2017, 2, 2)'</span></span><br></pre></td></tr></table></figure><p>如果不提供__str__方法，Python在查找__str__时会回退到__repr__的结果。因此建议总是为自定义类添加__repr__方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (<span class="string">f'<span class="subst">&#123;self.__class__.__name__&#125;</span>('</span></span><br><span class="line"><span class="string">f'<span class="subst">&#123;self.color!r&#125;</span>, <span class="subst">&#123;self.mileage!r&#125;</span>)'</span>)</span><br></pre></td></tr></table></figure><p>这里使用!r 转换标志来确保输出字符串使用的是repr(self.color)和repr(self.<br>mileage)，而不是str(self.color)和str(self.mileage)。</p><p>##定义自己的异常类<br>eg 人名验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(name) &lt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError</span><br></pre></td></tr></table></figure><p>报错时的栈回溯只显示到validata函数名和ValueError的提示，不详细。<br>可以直接定义<code>NameTooShortError</code>异常类型，它扩展自内置的<code>ValueError</code>类。一般情况下自定义异常都是派生自<code>Exception</code>这个异常基类或其他内置的<code>Python</code>异常,如<code>ValueError</code>或<code>TypeError</code>——取决于哪个更合适。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTooShortError</span><span class="params">(ValueError)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(name) &lt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">raise</span> NameTooShortError(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>validate(<span class="string">'jane'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;input&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">validate(<span class="string">'jane'</span>)</span><br><span class="line">File <span class="string">"&lt;input&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> validate</span><br><span class="line"><span class="keyword">raise</span> NameTooShortError(name)</span><br><span class="line">NameTooShortError: jane</span><br></pre></td></tr></table></figure><p>无论是公开发布Python软件包，还是为公司创建可重用的模块，最好为模块创建一个自定义异常基类，然后从中派生所有其他异常。<br>定义一个基类。其他错误类型会继承这个类。这样用户就可以编写try…except语句来处理软件包中所有的自定义错误，无须手动捕<br>获各个具体的异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseValidationError</span><span class="params">(ValueError)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTooShortError</span><span class="params">(BaseValidationError)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTooLongError</span><span class="params">(BaseValidationError)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTooCuteError</span><span class="params">(BaseValidationError)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">validate(name)</span><br><span class="line"><span class="keyword">except</span> BaseValidationError <span class="keyword">as</span> err:</span><br><span class="line">handle_validation_error(err)</span><br></pre></td></tr></table></figure><p>，编写自定义异常类能更好地在代码中采纳 “请求原谅比请求许可更容易”（easier to ask<br>for forgiveness than permission，EAFP ）这种Python 式的编程风格。</p><h2 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h2><p>Python 中的赋值语句不会创建对象的副本，而只是将名称绑定到对象上。对于不可变对象也是如此。<br>但为了处理可变对象或可变对象集合，需要一种方法来创建这些对象的“真实副本”或“克隆体”。<br>但是直接调用Python的内置可变容器，如列表、字典<br>和集合，调用对应的工厂函数就能完成复制。但是得到的是<strong>浅复制</strong>的副本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_list = list(original_list)</span><br><span class="line">new_dict = dict(original_dict)</span><br><span class="line">new_set = set(original_set)</span><br></pre></td></tr></table></figure><p><strong>浅复制</strong>是指构建一个新的容器对象，然后<strong>填充原对象中<code>子对象</code>的引用</strong>。本质上浅复制只执行一层，复制过程不会递归，因此不会创建子对象的副本。<br><strong>深复制</strong>是<strong>递归复制</strong>，首先构造一个新的容器对象，然后递归地填充原始对象中子对象的副本。这种方式会遍历整个对象树，以此来创建原对象及其所有子项的完全独立的副本。<br>可以使用<code>copy</code>模块来创建任意Python对象的浅副本和深副本。   </p><ul><li>copy.deepcopy()函数创建深副本   </li><li>copy.copy()函数会创建对象的浅副本。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xs = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zs = copy.deepcopy(xs)</span><br></pre></td></tr></table></figure><p> 创建的浅副本不会克隆子对象，因此副本和原对象并不完全独立。<br> 对象的深副本将递归克隆子对象。副本完全独立于原对象，但创建深副本的速度较慢。<br> 使用copy 模块可以复制任意对象（包括自定义类）。</p><h2 id="namedtuple-的优点"><a href="#namedtuple-的优点" class="headerlink" title="namedtuple 的优点"></a>namedtuple 的优点</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 类 </tag>
            
            <tag> 对象 </tag>
            
            <tag> namedtuple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python整洁之道</title>
      <link href="/2019/11/13/Python_Feature_1/"/>
      <url>/2019/11/13/Python_Feature_1/</url>
      
        <content type="html"><![CDATA[<p>Python一些特性      </p><a id="more"></a>         <h1 id="断言-assert-使用"><a href="#断言-assert-使用" class="headerlink" title="断言 assert 使用"></a>断言 assert 使用</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p> 使用在线商城的打折券为例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_discount</span><span class="params">(product,discount)</span>:</span></span><br><span class="line">   price = int(product[<span class="string">"price"</span>] * (<span class="number">1.0</span> - discount))</span><br><span class="line">   <span class="keyword">assert</span> <span class="number">0</span> &lt;= price &lt;= product[<span class="string">"price"</span>]</span><br><span class="line">   <span class="keyword">return</span> price</span><br></pre></td></tr></table></figure><p>下边创建一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>shoes = &#123;<span class="string">'name'</span>: <span class="string">"Fancy shoes"</span> , <span class="string">"price"</span>: <span class="number">13000</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_discount(shoes,<span class="number">0.2</span>) <span class="comment"># 通过 10400</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_discount(shoes,<span class="number">2</span>) <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><p>报错信息指向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AssertionError:</span><br><span class="line">----&gt; 3    assert 0 &lt;= price &lt;= product[&quot;price&quot;]</span><br></pre></td></tr></table></figure><p>故使用断言验证失败具体位置，便于异常回溯。<br>断言是告诉coder程序中出现了<strong>不可恢复</strong>的错误，对于可以预测的错误（eg没有找到文件）不适用于断言。<br>断言是程序<strong>内部自检</strong>，用于处理程序中不可能出现的条件，一旦不符合条件，就影响到后边的运算的正确性，所有断言是辅助调试工具。  </p><h2 id="断言语法"><a href="#断言语法" class="headerlink" title="断言语法"></a>断言语法</h2><p>assert 语句的语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert_stmt ::= <span class="string">"assert"</span> expression1 [<span class="string">","</span> expression2]</span><br></pre></td></tr></table></figure><p>其中<code>expression1</code>是需要测试的条件，可选的<code>expression2</code>是错误信息。如果断言失败就会显示这个错误信息。<br>在Python解释器中相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _debug__:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression1:</span><br><span class="line">        <span class="keyword">raise</span> AssertionError(expression2)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> cond == <span class="string">"x"</span>:</span><br><span class="line">        do_X()</span><br><span class="line">    <span class="keyword">elif</span> cond == <span class="string">"y"</span>:</span><br><span class="line">        do_Y()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">False</span>, (</span><br><span class="line">            <span class="string">'这种情况一般不会出现,但偶尔会出现'</span>,</span><br><span class="line">            <span class="string">'每次debug就不会出现这种情况了'</span>,</span><br><span class="line">            <span class="string">'我也不知道原因，你可以给我发邮件'</span>,</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>断言会给程序带来安全风险和bug。</li><li>容易形成语法怪癖，容易写出很多<strong>无用</strong>的断言。</li></ol><h3 id="不用断言验证数据"><a href="#不用断言验证数据" class="headerlink" title="不用断言验证数据"></a>不用断言验证数据</h3><p>如果命令行使用 <code>-O</code> 或者 <code>-OO</code>标识，或者修改了<code>CPython</code>的 <code>PYTHONOPTIMIZE</code>环境变量，就会全局禁用断言。<br>如果用于判断管理员的断言被屏蔽，普通用户就有了管理员的权限。<br>如果禁用断言引发了较大的错误，那么可能被其他人利用发起DoS攻击。<br>可以使用<code>if</code>语句来代替此类断言。  </p><h3 id="不要用元组做断言条件"><a href="#不要用元组做断言条件" class="headerlink" title="不要用元组做断言条件"></a>不要用元组做断言条件</h3><p>元组作为assert的<code>expression1</code>的时候，断言总是真的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="number">1</span>==<span class="number">2</span>,<span class="string">"This shold fail"</span>) <span class="comment"># Always True</span></span><br></pre></td></tr></table></figure><p>因为Python中非空元组总是真值。<br>有些错误更不容易被发现。如下例，不知不觉就用到了元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(</span><br><span class="line">    counter == <span class="number">10</span>,</span><br><span class="line">    <span class="string">"It also always true."</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="Python断言总结"><a href="#Python断言总结" class="headerlink" title="Python断言总结"></a>Python断言总结</h2><p>断言是强大的调试工具，了解断言可以更好的维护和调试Python代码。</p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ul><li>Python断言是一种测试某个条件的调试辅助功能，用于程序的内部自检。</li><li>断言应该用于帮助开发者识别bug，不是用于处理运行时的错误的机制。</li><li>设置解释器可以全局禁用断言。</li></ul><h1 id="逗号的使用"><a href="#逗号的使用" class="headerlink" title="逗号的使用"></a>逗号的使用</h1><p>在Python的列表、字典或者集合常量中添加或者移除项，记得在所有行后边加一个逗号。<br>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [</span><br><span class="line">        <span class="string">"Alice"</span>,</span><br><span class="line">        <span class="string">"Bob"</span>,</span><br><span class="line">        <span class="string">"Dog"</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>这里在<code>Dog</code>后边加上逗号比较好，这样如果在代码编辑的时候在后边加元素就不容易漏掉逗号了。否则就会有比较大的错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [</span><br><span class="line">        <span class="string">"Alice"</span>,</span><br><span class="line">        <span class="string">"Bob"</span>,</span><br><span class="line">        <span class="string">"Dog"</span></span><br><span class="line">        <span class="string">"Kitty"</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>看起来是四个元素，但是由于<code>字符串字面值拼接</code>的原因，缺少了逗号后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names </span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'DogKitty'</span>]</span><br></pre></td></tr></table></figure><p>后边两个拼接起来了，字符串拼接是一个特性。<strong>“以空白字符分隔多个相连的字符串或byte字面值，即使他们各自使用不同的引号，也会执行拼接操作。”</strong><br>字符串字面值拼接主要用于在跨越多行的长字符串之间可以省去反斜杠。那么在Python列表，字典，集合的最后一项后边也加上逗号就解决了。<br>最后效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [</span><br><span class="line">        <span class="string">"Alice"</span>,</span><br><span class="line">        <span class="string">"Bob"</span>,</span><br><span class="line">        <span class="string">"Dog"</span>,</span><br><span class="line">        <span class="string">"Kitty"</span>,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h2><ul><li>合理的逗号放置可以让列表、字典和集合更容易维护。</li><li>Pyton的字符串字面拼接特性即可能带来帮助，也会引发难以发现的bug。</li></ul><h1 id="上下文和with语句"><a href="#上下文和with语句" class="headerlink" title="上下文和with语句"></a>上下文和with语句</h1><h2 id="with使用方法"><a href="#with使用方法" class="headerlink" title="with使用方法"></a>with使用方法</h2><p>再打开文件的时候经常使用 <code>with open(file_path,&quot;r+&quot;) as f:</code> 因为这样会在程序执行离开<code>with</code>语句的上下文后自动关闭。所以正常的文件操作可以理解为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(file_path,<span class="string">"r+"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    do_something_with(f);</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>其实，只要类能够实现<strong>上下文管理器</strong>(context manager)，就可以与with一起使用了。上下文管理器也就是类方法中有<code>__enter__</code>和<code>__exit___</code>。Python会在进入<code>with</code>上下文的时候调用<code>__enter__</code>，离开<code>with</code>上下文的时候调用<code>__exit___</code>。</p><h2 id="with用例"><a href="#with用例" class="headerlink" title="with用例"></a>with用例</h2><p>文本缩进的例子：<br>首先实现一个有上下文管理器的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Indenter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.level = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.level += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self,exc_type,exc_val,exc_tb)</span>:</span></span><br><span class="line">        self.level -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        print(<span class="string">"    "</span> * self.level + text + <span class="string">"              num space: "</span> + str(self.level))</span><br></pre></td></tr></table></figure><p>然后就可以使用with操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Indenter() <span class="keyword">as</span> indent:</span><br><span class="line">    indent.print(<span class="string">"one"</span>)</span><br><span class="line">    <span class="keyword">with</span> indent:</span><br><span class="line">        indent.print(<span class="string">"two"</span>)</span><br><span class="line">        <span class="keyword">with</span> indent:</span><br><span class="line">            indent.print(<span class="string">"three"</span>)</span><br><span class="line">    indent.print(<span class="string">"last_one"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">one              num space: 1</span><br><span class="line">    two              num space: 2</span><br><span class="line">        three              num space: 3</span><br><span class="line">last_one              num space: 1</span><br></pre></td></tr></table></figure><h2 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h2><ul><li><code>with</code>语句就是通过在所谓的上下文管理器中封装<code>try ... finally ...</code>语句的标准用法来简化异常处理。</li><li><code>with</code>语句一般用于管理系统资源的安全获取和释放。</li></ul><h1 id="下划线、双下划线"><a href="#下划线、双下划线" class="headerlink" title="下划线、双下划线"></a>下划线、双下划线</h1><ul><li>前置单下划线： _var</li><li>后置单下划线： var_</li><li>前置双下划线： __var</li><li>前后双下划线： _<em>var_</em></li><li>单下划线：     _  </li></ul><h2 id="前置单下划线作用"><a href="#前置单下划线作用" class="headerlink" title="前置单下划线作用"></a>前置单下划线作用</h2><p>只有<strong>提示</strong>作用，说明该变量或者方法只在内部使用。对Python解释器没有特殊含义。<br>但是在一定情况下，如使用通配符导入的时候不会导入带有下划线的名称。（除非模块中定义了__all__列表覆盖了这种行为）<br>eg: 无法使用 <code>from my_module import *</code> 导入<code>my_module.py</code>里定义的<code>_my_func()</code>方法，需要  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module </span><br><span class="line">my_module._my_func()</span><br></pre></td></tr></table></figure><h2 id="后置下划线-var"><a href="#后置下划线-var" class="headerlink" title="后置下划线 var_"></a>后置下划线 var_</h2><p>主要用于防止与python关键字重复，多用于 <code>class_</code>等</p><h2 id="前置双下划线-var"><a href="#前置双下划线-var" class="headerlink" title="前置双下划线 __var"></a>前置双下划线 __var</h2><p>在类环境中使用会触发名称改写，对Python解释器有特殊含义。我一般不用这个，就不看了。</p><blockquote><p>补充： dunder 即为 双下划线 （double underscore）</p></blockquote><p>##前后双下划线<br>前后双下划线不受Python解释器影响。双下划线方法为魔法方法。在自己的方法实现和变量中最好不要自定义这种类型，容易冲突，现在不冲突可能过两年python版本更新就冲突了。</p><p>##单下划线 _<br>单下划线用于名称时，可以表示变量是暂时的和无关紧要的，占位符一样。<br>eg:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">car = (<span class="string">'red'</span>,<span class="string">"auto"</span>,<span class="number">332</span>)</span><br><span class="line">color, _, _ = car</span><br></pre></td></tr></table></figure><p>   <code>_</code> 还可以在Python REPL中是一种特殊变量，表示解释器计算的上一个表达式的结果 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">20</span> + <span class="number">3</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(_)</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><h1 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h1><h2 id="类型的"><a href="#类型的" class="headerlink" title="%类型的"></a><code>%</code>类型的</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % name</span><br><span class="line"><span class="string">'Hello Bob'</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hey %&#123;name&#125;s ,there is a 0x%&#123;errno&#125;x error!'</span> % &#123;<span class="string">"name"</span>:name,<span class="string">"errno"</span>:errno&#125;</span><br><span class="line"><span class="string">"Hey Bob,there is a 0xbadc0ffee error!"</span></span><br><span class="line">```  </span><br><span class="line"><span class="comment">##  `format`形式 </span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello ,&#123;&#125;'</span>.format(name)</span><br><span class="line"><span class="string">'Hello Bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hey &#123;name&#125; ,there is a 0x&#123;errno:x&#125; error!'</span>.format(name=name,errno=errno)</span><br><span class="line"><span class="string">"Hey Bob,there is a 0xbadc0ffee error!"</span></span><br></pre></td></tr></table></figure><h2 id="f-39-39-形式（Python3-6-）"><a href="#f-39-39-形式（Python3-6-）" class="headerlink" title="f&#39;&#39;形式（Python3.6+）"></a><code>f&#39;&#39;</code>形式（Python3.6+）</h2><p>字符串字面值插值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f'Hello <span class="subst">&#123;name&#125;</span>'</span></span><br><span class="line"><span class="string">'Hello Bob'</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f'Five plus ten is <span class="subst">&#123;a+b&#125;</span> and not <span class="subst">&#123;<span class="number">2</span>*(a + b)&#125;</span>.'</span></span><br><span class="line"><span class="string">'Five plus ten is 15 and not 30.'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; f'Hey &#123;name&#125; ,there is a 0x&#123;errno:#x&#125; error!'</span><br><span class="line"><span class="string">"Hey Bob,there is a 0xbadc0ffee error!"</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = Template(<span class="string">"Hey,$name"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.substitute(name = name)</span><br><span class="line"><span class="string">'Hey,Bob'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp1_string = <span class="string">'Hey $name ,there is a $errno error!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(tmp1_string).substitute(name=name,errno=hex(errno))</span><br><span class="line"><span class="string">"Hey Bob,there is a 0xbadc0ffee error!"</span></span><br></pre></td></tr></table></figure><p>模板字符串更简单也更加安全，处理用户输入的字符串的时候最好用<code>Template</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> assert </tag>
            
            <tag> 逗号 </tag>
            
            <tag> 上下文和with </tag>
            
            <tag> 下划线 </tag>
            
            <tag> string format </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数</title>
      <link href="/2019/11/13/Python_Feature_2/"/>
      <url>/2019/11/13/Python_Feature_2/</url>
      
        <content type="html"><![CDATA[<hr><p>函数是Python的头等对象    </p><a id="more"></a><h1 id="函数是Python的头等对象"><a href="#函数是Python的头等对象" class="headerlink" title="函数是Python的头等对象"></a>函数是Python的头等对象</h1><p>函数是python的头等对象，可以将函数分配给变量、存储在数据结构中，作为参数传递给其他函数，甚至作为其他函数的返回值。<br>下边举一个简单例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yell</span><span class="params">(text)</span>:</span></span><br><span class="line"><span class="keyword">return</span> text.upper() + <span class="string">"!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yell(<span class="string">"hello"</span>)</span><br><span class="line"><span class="string">'HELLO!'</span></span><br></pre></td></tr></table></figure><h2 id="函数作为对象"><a href="#函数作为对象" class="headerlink" title="函数作为对象"></a>函数作为对象</h2><p>python程序中的所有数据都是由对象或对象之间的关系表示的。字符串、列表和模块等都是对象。函数也是对象。<br>上例的 <em>yell</em> 函数也是对象，所有可以分配给另一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bark = yell</span><br></pre></td></tr></table></figure><p>这边没有调用，知识获取了 <em>yell</em> 引用的函数对象。再创建了一个指向该对象的名称 <em>bark</em> 。调用这个变量可执行相同的底层函数对象。</p><p>函数对象和其名称是相互独立的实体。删掉了函数的原始名称 <em>yell</em> ，使用另一个名称 <em>bark</em> 同样可以指向底层函数并调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> yell</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yell(<span class="string">"hello"</span>)</span><br><span class="line">NameError:<span class="string">"name"</span> <span class="string">'yell'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bark(<span class="string">'Hey'</span>)</span><br><span class="line"><span class="string">"HEY!"</span></span><br><span class="line">``` </span><br><span class="line">但是函数创建的时候仍然给每个函数附带了便于调试的字符串。使用__name__属性可以访问这个内部标识符：</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;即便夺去了天下，也夺去不了你&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bark.__name__</span><br><span class="line"><span class="string">'yell'</span></span><br></pre></td></tr></table></figure><p><strong>指向函数的变量</strong>和<strong>函数本身</strong>是相互独立的</p><h2 id="函数存储在数据结构中"><a href="#函数存储在数据结构中" class="headerlink" title="函数存储在数据结构中"></a>函数存储在数据结构中</h2><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs = [bark,str.lower,str.capitalize]</span><br></pre></td></tr></table></figure><p>可以直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs[<span class="number">0</span>](<span class="string">"heyho"</span>)</span><br><span class="line"><span class="string">"HEYHO!"</span></span><br></pre></td></tr></table></figure><p>##函数可以传递给其他函数<br>func用于传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(func)</span>:</span></span><br><span class="line">greeting = func(<span class="string">"Hi, I am a Python program"</span>)</span><br><span class="line">print(greeting)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet(bark)</span><br><span class="line"><span class="string">'HI, I AM A PYTHON PROGRAM'</span></span><br></pre></td></tr></table></figure><p>这样就可以将函数的<strong>行为</strong>抽象出来并传递出去。而能接受其他函数作为参数的函数称为<strong>高阶函数</strong>。比如内置的 map 函数，map 函数接受一个函数对象和一个可迭代对象，然后将可迭代对象中的每个元素调用该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(bark,[<span class="string">'hello'</span>, <span class="string">'hi'</span>, <span class="string">'hey'</span>]))</span><br><span class="line">[<span class="string">'HELLO!'</span>, <span class="string">'HI!'</span>, <span class="string">"HEY!"</span>]</span><br></pre></td></tr></table></figure><h2 id="函数可以嵌套"><a href="#函数可以嵌套" class="headerlink" title="函数可以嵌套"></a>函数可以嵌套</h2><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(text)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">(t)</span>:</span></span><br><span class="line"><span class="keyword">return</span> t.lower() + <span class="string">"..."</span></span><br><span class="line"><span class="keyword">return</span> whisper(text)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>speak(<span class="string">"Hello, World"</span>)</span><br><span class="line"><span class="string">'hello, world...'</span></span><br></pre></td></tr></table></figure><p>这里whisper只在speak内部，无法直接调用，即便使用 <strong>speak.whisper</strong> 也不行。要想调用只能改成将内部的函数<strong>返回</strong>给父函数的调用者。</p><h2 id="函数可以捕获局部状态"><a href="#函数可以捕获局部状态" class="headerlink" title="函数可以捕获局部状态"></a>函数可以捕获局部状态</h2><p>内部函数不仅可以从父函数返回。还可以<strong>捕获并携带父函数的某些状态</strong>.<br>eg:   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_speak_func</span><span class="params">(text,vol)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> text.lower() + <span class="string">"..."</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yell</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> text.upper() + <span class="string">"!"</span></span><br><span class="line"><span class="keyword">if</span> vol &gt; <span class="number">0.5</span>:</span><br><span class="line"><span class="keyword">return</span> yell</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> whisper</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_speak_func(<span class="string">'Hello, world'</span>,<span class="number">0.7</span>)()</span><br><span class="line"><span class="string">'HELLO WORLD!'</span></span><br></pre></td></tr></table></figure><p>这里的whisper和yell都没有text参数。但是内部函数仍然可以访问父函数中定义的text参数。它<strong>捕捉</strong>到并记住这个参数的值了。<br>拥有这个行为的函数称为<strong>词法闭包</strong>（lexical closure），也叫闭包。闭包在程序流不在闭包范围内的情况下，也能记住封闭区域（enclosing scope）中的值。<br>这意味着函数不仅可以<strong>返回行为</strong>，还可以<strong>预先配置这些行为</strong>。<br>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x + n</span><br><span class="line"><span class="keyword">return</span> add</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3 = make_adder(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_5 = make_adder(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_5(<span class="number">4</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3(<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>这里make_adder作为工厂函数来创建和配置各种add函数。这些adder函数仍然能访问make_adder函数位于封闭区域中的参数n。</p><h2 id="对象可以作为作为函数使用"><a href="#对象可以作为作为函数使用" class="headerlink" title="对象可以作为作为函数使用"></a>对象可以作为作为函数使用</h2><p>python所有函数都是对象。但是有些对象不是函数，但是可以调用。这时候不是函数的对象也可以<strong>当成函数</strong>来对待。<br>    如果一个对象是可以调用的，意味着可以使用圆括号函数调用语法，甚至可以传入调用参数。这些都由<em>_<em>call_</em></em>双下划线方法完成，下边的类能定义可调用对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">self.n = n</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.n + x</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3 = Adder(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3(<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>像函数这样“调用”一个对象实例实际上就是执行该对象的__call__方法。<br>当然不是所有的对象都可以被调用，可以使用内置的<em>callable</em>函数来检查一个对象能不能被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(plus_3)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(yell)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(<span class="string">"Hello"</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>python一起皆对象,函数也是对象，可以将函数分配给变量或者存储在数据结构中，作为头等对象，函数也可以被传递给其他函数或者作为其他函数的返回值   </li><li>头等函数的特性可以用于抽象和传递程序中的行为</li><li>函数可以嵌套，并且捕捉并携带父函数的一些状态。具有这种行为的函数称为闭包。   </li><li>对象可以被设置成可调用的，因此很多情况下可以将其作为函数对待。   </li></ul><h1 id="lambda-单表达式函数"><a href="#lambda-单表达式函数" class="headerlink" title="lambda 单表达式函数"></a>lambda 单表达式函数</h1><p>python中的lambda关键词可以快速声明小型匿名函数。lambda函数的行为与使用 <em>def</em> 关键词声明的常规函数一样，可以用作所有需要函数对象的地方。<br>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add = <span class="keyword">lambda</span> x, y : x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="keyword">lambda</span> x, y : x + y)(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>概念上 <strong>lambda表达式</strong> lambda x, y : x + y与使用def 声明函数相同，但是从语法来说表达式位于lambda内部。<br>关键区分在于：lambda不必先将函数对象与名称（可以不要名称的）绑定，只需要在lambda中创建一个想要执行的表达式，然后像普通函数那样立即调用进行计算。<br>而且lambda函数只能含有一个表达式，这意味着lambda函数不能使用语句或者注解（annotation）,甚至不能使用返回语句。<br>只能是计算其中的表达式，然后自动返回表达式的结果作为返回值。也就是总有一个隐式的返回表达式。所有lambda还被叫做<strong>单表达式函数</strong>.</p><h3 id="lambda的应用场景"><a href="#lambda的应用场景" class="headerlink" title="lambda的应用场景"></a>lambda的应用场景</h3><p>应用场所很多，只要需要提供一个函数对象时都能用。<br>可以用作可迭代对象的排序时，使用lambda表达式定义简短的key 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuples = [(<span class="number">1</span>,<span class="string">'d'</span>),(<span class="number">2</span>,<span class="string">'b'</span>),(<span class="number">4</span>,<span class="string">'a'</span>),(<span class="number">3</span>,<span class="string">'c'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tuple, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">[(<span class="number">4</span>,<span class="string">'a'</span>),(<span class="number">2</span>,<span class="string">'b'</span>),(<span class="number">3</span>,<span class="string">'c'</span>),(<span class="number">1</span>,<span class="string">'d'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(range(<span class="number">-5</span>,<span class="number">6</span>),key = <span class="keyword">lambda</span> x:x*x)</span><br><span class="line">[<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-4</span>,<span class="number">4</span>,<span class="number">-5</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>上边两个例子可以更简洁的用oprator.itemgetter() 和 abs()<br> 函数<br> lambda与普通嵌套函数一样具有词法闭包功能。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">make_adder</span><span class="params">(n)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3 = make_adder(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3(<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>即使n在make_adder函数（封闭的作用域）中定义的，但是lambda函数仍然能访问n的值。<br> 但是不要花哨的使用，在与map()或者filter()结合容易不好理解，这里可以用列表解析式或者生成表达式会清晰：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, range(<span class="number">12</span>)))</span><br><span class="line">[<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">12</span>) <span class="keyword">if</span>(x % <span class="number">2</span> == <span class="number">0</span>)]</span><br></pre></td></tr></table></figure><ul><li>lambda 是单表达式函数，不必与名称绑定（匿名）</li><li>lambda 函数不能呢个使用普通的Python语句，其中总是包含一个隐式的return 语句。</li><li>使用前考虑好<strong>使用普通具名函数或列表解析式是否更加清晰</strong></li></ul><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>  Python 的装饰器可以临时拓展和修改可调用对象（函数、方法和类）的行为，同时又不会永久修改可调用对象本身。<br>  装饰器的一大用途就是将通用的功能应用到现有的类或函数的行为上，这些功能包括：</p><blockquote><pre><code>日志（logging）   访问控制与授权   衡量函数，如执行时间   限制访问速率（rate-limiting）    缓存，等等     </code></pre></blockquote><p>回顾下函数特性：    </p><blockquote><p><strong>函数是对象</strong>，可以分配给变量并传递给其他函数，以及从其他函数返回。<br><strong>函数内部也能定义函数</strong>，而且子函数可以捕获父函数的局部状态（闭包）</p></blockquote><h2 id="装饰器基础"><a href="#装饰器基础" class="headerlink" title="装饰器基础"></a>装饰器基础</h2><p>装饰器用来装饰另一个函数，在被包装函数运行之前和之后执行一些代码。<br>装饰器是可调用的，将可调用对象作为输入并返回另一个可调用对象。<br>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">null_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@null_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet()</span><br><span class="line"><span class="string">'Hello'</span></span><br></pre></td></tr></table></figure><p>在函数定义前放置一个@null_decorator，相当于先定义这个函数，然后运行这个装饰器。@只是<strong>语法糖</strong>，简化了这种常用的写法。<br>但是使用@语法在函数定义时就立即修饰该函数，这样不好访问未装饰的原函数了。如果想保留调用未装饰函数的能力，还需要手动修饰需要处理的函数。   </p><h2 id="装饰器可以修改行为"><a href="#装饰器可以修改行为" class="headerlink" title="装饰器可以修改行为"></a>装饰器可以修改行为</h2><p>实现一个有实际作用的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uppercase</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">()</span>:</span></span><br><span class="line">original_result = func()</span><br><span class="line">modified_result = original_result.upper()</span><br><span class="line"><span class="keyword">return</span> modified_result</span><br><span class="line"><span class="keyword">return</span> wrap</span><br></pre></td></tr></table></figure><p>这个uppercase装饰器在内部定义了一个新函数（闭包）。在调用原函数时，新函数会<strong>包装</strong>原函数来修改其行为。<br>包装闭包可以访问未经装饰的输入函数，并且在输入函数之前和之后自由执行额外的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@uppercase</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet()</span><br><span class="line"><span class="string">'HELLO'</span></span><br></pre></td></tr></table></figure><p>uppercase本身就是一个函数。对于被装饰的输入函数来说，修改其未来行为的唯一方法就是用闭包替换（或者包装）这个函数。<br>装饰器通过包装闭包来修改可调用对象的行为，因此无需永久的修改原对象。原可调用对象的行为仅仅在装饰时才变化。所以大量可重用代码（日志输出等）应用于现有的函数与类就可以用装饰器来实现。</p><h2 id="将多个装饰器应用到一个函数"><a href="#将多个装饰器应用到一个函数" class="headerlink" title="将多个装饰器应用到一个函数"></a>将多个装饰器应用到一个函数</h2><p>多个装饰器装饰一个函数的顺序是<strong>自下而上</strong>。也就是靠近函数的装饰器先装饰（近水楼台）。</p><p>##装饰器接受参数的函数<br>之前的装饰器都是只有一个函数输入，输出一个函数（函数都是地址，都没有实现的）。而如果要用到参数就要用到Python的变长参数*args和**kwargs 特性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line"><span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><ul><li>他在wrapper闭包定义使用*和**操作收集位置参数和关键词参数，并保存到args和kwargs里。 </li><li>接着，wrapper闭包使用*和** 参数解包 操作符将收集到的参数转发到原输入函数。<br>eg：trace装饰器可以记录函数参数和结果：   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">print(<span class="string">f'TRACE: calling <span class="subst">&#123;func.__name__&#125;</span>()'</span> </span><br><span class="line">  <span class="string">f'with <span class="subst">&#123;args&#125;</span>,<span class="subst">&#123;kwargs&#125;</span>'</span>)</span><br><span class="line">original_result = func(*args,**kwargs)</span><br><span class="line">print(<span class="string">f'TRACE: <span class="subst">&#123;func.__name__&#125;</span>() '</span></span><br><span class="line">  <span class="string">f'returned <span class="subst">&#123;original_result&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">return</span> original_result</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: @trace</span><br><span class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(name,line)</span>:</span></span><br><span class="line">   ...:     <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;name&#125;</span>:<span class="subst">&#123;line&#125;</span>'</span></span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: say(<span class="string">'lzp'</span>,<span class="string">'Hello World!'</span>)</span><br><span class="line">TRACE: calling say()<span class="keyword">with</span> (<span class="string">'lzp'</span>, <span class="string">'Hello World!'</span>),&#123;&#125;</span><br><span class="line">TRACE: say() returned lzp:Hello World!</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'lzp:Hello World!</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="‘可调试’的装饰器"><a href="#‘可调试’的装饰器" class="headerlink" title="‘可调试’的装饰器"></a>‘可调试’的装饰器</h2><p>使用装饰器其实是用一个函数替代另一个函数，这个过程有个缺点就是“隐藏了”原函数附带的一些元数据。如果装饰之后，__name__ 和 _<em>doc_</em> 都是闭包的元数据。但是使用python标准库的 @functools.wraps 能够将缺失的元数据复制到装饰器的闭包中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uppercase</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">@functools.wraps(func)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> func.upper()</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p> 将functools.wraps 应用到由装饰器返回的封装闭包中，会获得原函数的文档字符串和其他元数据：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: @uppercase</span><br><span class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     <span class="string">"""Rerturn a friendly greeding"""</span></span><br><span class="line">   ...:     <span class="keyword">return</span> <span class="string">"HELLO"</span></span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: greet.__name__</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'greet'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: greet.__doc__</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'Rerturn a friendly greeding'</span></span><br></pre></td></tr></table></figure><p>##关键点</p><ul><li>装饰器定义可重用组件。用于可调用对象改变其行为，同时无需永远修改可调用对象本身。</li><li>@语法只是在输入函数上调用装饰器对的简写。单个函数应用多个装饰器是从下而上的。</li><li>可以使用functools.wraps 将被装饰对象中的元数 据转移到装饰后的对象中。 </li></ul><h1 id="args-和-kwargs"><a href="#args-和-kwargs" class="headerlink" title="*args 和 **kwargs"></a>*args 和 **kwargs</h1><p>*args 和**kwargs 参数到底有什么用呢？它们能让函数接受可选参数，因此能在模块和类中创建灵活的API：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(required,*args,**kwargs)</span>:</span></span><br><span class="line">print(required)</span><br><span class="line"><span class="keyword">if</span> args:</span><br><span class="line">print(args)</span><br><span class="line"><span class="keyword">if</span> kwargs:</span><br><span class="line">print(kwargs)</span><br></pre></td></tr></table></figure><p>上述函数至少需要一个名为required 的参数，但也可以接受额外的位置参数和关键字参数。<br>如果用额外的参数调用该函数，args 将收集额外的位置参数组成元组，因为这个参数名称<br>带有*前缀。<br>同样，kwargs 会收集额外的关键字参数来组成字典，因为参数名称带有**前缀。<br>如果不传递额外的参数，那么args 和kwargs 都为空。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="string">'hello'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, key1=<span class="string">'value'</span>, key2=<span class="number">999</span>)</span><br><span class="line">hello</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'key1'</span>: <span class="string">'value'</span>, <span class="string">'key2'</span>: <span class="number">999</span>&#125;</span><br></pre></td></tr></table></figure><p>参数在传递之前还可以修改:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, *args, **kwargs)</span>:</span></span><br><span class="line">kwargs[<span class="string">'name'</span>] = <span class="string">'Alice'</span></span><br><span class="line">new_args = args + (<span class="string">'extra'</span>, )</span><br><span class="line">bar(x, *new_args, **kwargs)</span><br></pre></td></tr></table></figure><h2 id="传递可选参数或关键词参数"><a href="#传递可选参数或关键词参数" class="headerlink" title="传递可选参数或关键词参数"></a>传递可选参数或关键词参数</h2><p>可选参数或关键字参数还可以从一个函数传递到另一个函数。这需要用解包操作符 * 和 ** 将<br>参数传递给被调用的函数。<br>这种技术适用于创建子类和编写包装函数。例如在扩展父类的行为时，子类中的构造函数不用再带有完整的参数列表，因而适用于处理那些不受我们控制的API：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color, mileage)</span>:</span></span><br><span class="line">self.color = color</span><br><span class="line">self.mileage = mileage</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlwaysBlueCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">super().__init__(*args,**kwargs)</span><br><span class="line">self.color = <span class="string">'Blue'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>AlwaysBlueCar(<span class="string">'green'</span>, <span class="number">48392</span>).color</span><br><span class="line"><span class="string">'Blue'</span></span><br></pre></td></tr></table></figure><p>AlwaysBlueCar 构造函数只是将所有参数传递给它的父类，然后重写一个内部属性。这意<br>味着如果父类的构造函数发生变化，AlwaysBlueCar 仍然可以按预期运行。<br>不过缺点是，AlwaysBlueCar 构造函数现在有一个相当无用的签名——若不查看父类，无<br>从知晓函数会接受哪些参数。<br>一般情况下，自己定义的类层次中并不会用到这种技术。这通常用于修改或覆盖某些外部类<br>中的行为，而自己又无法控制这些外部类。<br>还可以在装饰函数中传递函数参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">@functools.wraps(f)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">print(f,args,kwargs)</span><br><span class="line">original_result = f(*args,**kwargs)</span><br><span class="line">print(original_result)</span><br><span class="line"><span class="keyword">return</span> decorated_function</span><br><span class="line"><span class="meta">@trace </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(greeting,name)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(greeting, name)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: greet(<span class="string">'Hello'</span>,<span class="string">'Mike'</span>)</span><br><span class="line">&lt;function greet at <span class="number">0x2ace01b711e0</span>&gt; (<span class="string">'Hello'</span>, <span class="string">'Mike'</span>) &#123;&#125;</span><br><span class="line">Hello, Mike!</span><br></pre></td></tr></table></figure><h2 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h2><ul><li>*args 和**kwargs 用于在Python 中编写变长参数的函数。    </li><li>*args 收集额外的位置参数组成元组。**kwargs 收集额外的关键字参数组成字典。  </li><li>实际起作用的语法是*和**。args 和kwargs 只是约定俗成的名称（但应该坚持使用这<br>两个名称）。    <h1 id="函数参数解包"><a href="#函数参数解包" class="headerlink" title="函数参数解包"></a>函数参数解包</h1>* 和** 操作符可以分别从序列（包含元组等）和字典中“解包”函数参数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_vector</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">print(<span class="string">'&lt;%s, %s, %s&gt;'</span> % (x, y, z))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_vec = (<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_vec = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_vector(tuple_vec[<span class="number">0</span>],</span><br><span class="line">tuple_vec[<span class="number">1</span>],</span><br><span class="line">tuple_vec[<span class="number">2</span>])</span><br><span class="line">&lt;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这样加入多个参数太麻烦，怎样将向量参数炸开成三个组件就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_vector(*tuple_vec)</span><br><span class="line">print_vector(*list_vec)</span><br></pre></td></tr></table></figure><p>在函数调用时，在可迭代对象前面放一个*能解包这个参数，将其中的元素作为单独的位置参数传递给被调用的函数。<br>这种技术适用于任何可迭代对象，包括生成器表达式。在生成器上使用*操作符会消耗生成器中的所有元素，并将它们传递给函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;genexpr = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line">&gt;&gt;&gt;print_vector(*genexpr)</span><br><span class="line">```   </span><br><span class="line">\*操作符用于将元组、列表和生成器等序列解包为位置参数。除此之外，还有用于从字典中解包关键字参数的\*\*操作符。假设用下面这个字典对象表示前面的向量：</span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_vec = &#123;<span class="string">'y'</span>: <span class="number">0</span>, <span class="string">'z'</span>: <span class="number">1</span>, <span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_vector(**dict_vec)</span><br><span class="line">&lt;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&gt;</span><br></pre></td></tr></table></figure><p>由于字典是无序的，因此解包时会匹配字典键和函数参数：x 参数接受字典中与’x’键相关联的值。<br>如果使用单个星号（*）操作符来解包字典，则所有的键将以随机顺序传递给函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_vector(*dict_vec)</span><br><span class="line">&lt;y, x, z&gt;</span><br></pre></td></tr></table></figure><p>Python 的函数参数解包功能带来了很多灵活性。也就是说，不一定要为程序所需的数据类型<br>实现一个类，使用简单的内置数据结构（如元组或列表）就足够了，这样有助于降低代码的复杂度。</p><h2 id="关键要点-1"><a href="#关键要点-1" class="headerlink" title="关键要点"></a>关键要点</h2><ul><li>* 和 ** 操作符可以从序列和字典中“解包”函数参数。</li><li>高效使用参数解包可以为模块和函数编写更灵活的接口。   </li></ul><h1 id="默认返回空值"><a href="#默认返回空值" class="headerlink" title="默认返回空值"></a>默认返回空值</h1><p>Python在所以函数的末尾都添加了隐式的 <code>return None</code> 语句。<br>所以函数没有指定返回值，默认就返回None。不写 <code>return</code> 相当于单语句 <code>return</code> 相当于 <code>return None</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数 </tag>
            
            <tag> lambda </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> 函数参数*args,**kwargs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 39 -- Combination Sum</title>
      <link href="/2019/10/21/Leetcode-39/"/>
      <url>/2019/10/21/Leetcode-39/</url>
      
        <content type="html"><![CDATA[<h1 id="Discription"><a href="#Discription" class="headerlink" title="Discription"></a><a href="https://leetcode.com/problems/combination-sum/description/" target="_blank" rel="noopener">Discription</a></h1><table><thead><tr><th>Category</th><th align="center">Difficulty</th><th align="right">Likes</th><th align="right">Dislikes</th></tr></thead><tbody><tr><td>algorithms</td><td align="center">Medium (50.43%)</td><td align="right">2565</td><td align="right">78</td></tr></tbody></table><a id="more"></a>   <p>Given a set of candidate numbers (<strong>candidates</strong>) (without duplicates) and a target number (<strong>target</strong>), find all unique combinations in <strong>candidates</strong> where the candidate numbers sums to <strong>target</strong>.<br>The <em>same</em> repeated number may be chosen from <strong>candidates</strong> unlimited number of times.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li>All numbers (including <strong>target</strong>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], target = <span class="number">7</span>,</span><br><span class="line">A solution set <span class="keyword">is</span>:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>], target = <span class="number">8</span>,</span><br><span class="line">A solution set <span class="keyword">is</span>:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Here we use tree.<br>Each node subtracts the elements of the array until the value of node is lower than 0.<br><img src="https://pic.leetcode-cn.com/6e40e8001540f336dacbef4baa7710f31ca00a31ad286b7aa4109a13657d8960-39-2.png" alt="pipeline"><br>Reduce redundant.(the subtracts of lower node is large or equal to lower node)<br><img src="https://pic.leetcode-cn.com/ade93b4f0678b2b1385ad1362ff426ce0a5a800a5b0ae07dfb65f58677374559-39-3.png" alt="Reduce redundant"></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @lc app=leetcode id=39 lang=python</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># [39] Combination Sum</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        candidates.sort()</span><br><span class="line">        len_target = len(candidates)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_sum</span><span class="params">(start,list_now,target_now)</span>:</span></span><br><span class="line">            <span class="keyword">if</span>(target_now == <span class="number">0</span>):</span><br><span class="line">                res.append(list_now[:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(start,len_target):</span><br><span class="line">                    <span class="keyword">if</span>(target_now - candidates[i]&lt;<span class="number">0</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        list_now.append(candidates[i])</span><br><span class="line">                        find_sum(i,list_now,target_now - candidates[i])</span><br><span class="line">                        list_now.pop()</span><br><span class="line">        find_sum(<span class="number">0</span>,[],target)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><ul><li>Accepted</li><li>168/168 cases passed (48 ms)</li><li>Your runtime beats 72.65 % of python submissions</li><li>Your memory usage beats 59.18 % of python submissions (11.8 MB)</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> backtracking </tag>
            
            <tag> snapchat </tag>
            
            <tag> uber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就是测试下左下角的妹子</title>
      <link href="/2019/09/15/Test-blog/"/>
      <url>/2019/09/15/Test-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="一些参考博客："><a href="#一些参考博客：" class="headerlink" title="一些参考博客："></a>一些参考博客：</h1><ul><li><a href="https://sevencho.github.io/archives/cb206c67.html" target="_blank" rel="noopener">曹雪松de博客</a></li><li><a href="http://www.arccode.net/" target="_blank" rel="noopener">arccode</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 妹子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/15/hello-world/"/>
      <url>/2019/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.   </p><a id="more"></a>   <h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
